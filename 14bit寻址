以下是将代码改为14位寻址后的完整代码：
 
cpp  
#include <Wire.h>

// 24C128 EEPROM相关定义
#define EEPROM_ADDRESS 0x50
#define EEPROM_PAGE_SIZE 64
#define EEPROM_TOTAL_SIZE 16384  // 128K位换算成字节得到，即16384字节

// 假设这些全局变量在其他地方声明
extern int startHourForGroup1;
extern int startMinuteForGroup1;
extern int endHourForGroup1;
extern int endMinuteForGroup1;
extern bool isTimedGroup1;
extern int startHourForGroup2;
extern int startMinuteForGroup2;
extern int endHourForGroup2;
extern int endMinuteForGroup2;
extern bool isTimedGroup2;

// 向EEPROM写入数据的函数，添加写入重试机制和更详细的错误处理
void writeEEPROM(int address, const char* data, int length) {
    int maxRetries = 3;  // 最大重试次数
    for (int retry = 0; retry < maxRetries; retry++) {
        // 将地址转换为14位
        uint16_t newAddress = (address & 0x3FFF);
        Wire.beginTransmission(EEPROM_ADDRESS);
        Wire.write((int)(newAddress >> 7));  // 传输高7位地址
        Wire.write((int)(newAddress & 0x7F));  // 传输低7位地址
        int bytesToWrite = length;
        if ((newAddress % EEPROM_PAGE_SIZE) + length > EEPROM_PAGE_SIZE) {
            bytesToWrite = EEPROM_PAGE_SIZE - (newAddress % EEPROM_PAGE_SIZE);
        }
        for (int i = 0; i < bytesToWrite; i++) {
            Wire.write(data[i]);
        }
        if (Wire.endTransmission() == 0) {
            return;  // 写入成功，直接返回
        }
        Serial.print("EEPROM写入数据出现错误，地址: ");
        Serial.println(address);
        Serial.print("正在重试...重试次数: ");
        Serial.println(retry + 1);
        delay(100);  // 重试间隔
    }
    Serial.print("多次重试后，EEPROM写入数据仍然失败，地址: ");
    Serial.println(address);
}

// 从EEPROM读取数据的函数，添加读取结果判断和错误提示
String readEEPROM(int address, int length) {
    String data = "";
    // 将地址转换为14位
    uint16_t newAddress = (address & 0x3FFF);
    Wire.beginTransmission(EEPROM_ADDRESS);
    Wire.write((int)(newAddress >> 7));  // 传输高7位地址
    Wire.write((int)(newAddress & 0x7F));  // 传输低7位地址
    Wire.endTransmission(false);
    Wire.requestFrom(EEPROM_ADDRESS, length);
    int receivedBytes = 0;
    while (Wire.available()) {
        char c = Wire.read();
        data += c;
        receivedBytes++;
    }
    if (receivedBytes!= length) {
        Serial.print("从EEPROM读取数据出现错误，期望读取 ");
        Serial.print(length);
        Serial.print(" 字节，实际读取 ");
        Serial.print(receivedBytes);
        Serial.print(" 字节，地址: ");
        Serial.println(address);
    }
    return data;
}

// 从EEPROM读取定时设置数据的函数，添加数据合法性检查和读取前后延迟
void readTimingSettingsFromEEPROM() {
    delay(20);  // 读取前增加延迟
    // 读取定时1的设置
    String data = readEEPROM(0, 12);
    if (data.length() == 12) {
        bool isValid = true;
        for (int i = 0; i < 8; i++) {
            if (data[i] < '0' || data[i] > '9') {
                isValid = false;
                break;
            }
        }
        if (isValid) {
            startHourForGroup1 = data.substring(0, 2).toInt();
            startMinuteForGroup1 = data.substring(2, 4).toInt();
            endHourForGroup1 = data.substring(4, 6).toInt();
            endMinuteForGroup1 = data.substring(6, 8).toInt();
            isTimedGroup1 = data.substring(8, 9) == "1";
        } else {
            Serial.println("定时1读取到的数据存在非法字符");
        }
    }
    // 读取定时2的设置
    data = readEEPROM(12, 12);
    if (data.length() == 12) {
        bool isValid = true;
        for (int i = 0; i < 8; i++) {
            if (data[i] < '0' || data[i] > '9') {
                isValid = false;
                break;
            }
        }
        if (isValid) {
            startHourForGroup2 = data.substring(0, 2).toInt();
            startMinuteForGroup2 = data.substring(2, 4).toInt();
            endHourForGroup2 = data.substring(4, 6).toInt();
            endMinuteForGroup2 = data.substring(6, 8).toInt();
            isTimedGroup2 = data.substring(8, 9) == "1";
        } else {
            Serial.println("定时2读取到的数据存在非法字符");
        }
    }
    delay(20);  // 读取后增加延迟
}

// 将定时设置数据写入EEPROM的函数，添加地址范围检查
void writeTimingSettingsToEEPROM() {
    if (0 > 0 || 0 + 12 > EEPROM_TOTAL_SIZE) {
        Serial.println("定时设置数据写入地址超出合理范围");
        return;
    }
    // 构建定时1的数据字符串，确保格式化为固定长度（这里假设总长度12字节，格式如：00000000000，前8位分别为时分时分，最后一位为是否定时标志）
    char data1[12];
    sprintf(data1, "%02d%02d%02d%02d%c", startHourForGroup1, startMinuteForGroup1, endHourForGroup1, endMinuteForGroup1, isTimedGroup1? '1' : '0');
    // 写入定时1的数据到EEPROM
    writeEEPROM(0, data1, 12);
    // 构建定时2的数据字符串
    char data2[12];
    sprintf(data2, "%02d%02d%02d%02d%c", startHourForGroup2, startMinuteForGroup2, endHourForGroup2, endMinuteForGroup2, isTimedGroup2? '1' : '0');
    // 写入定时2的数据到EEPROM
    writeEEPROM(12, data2, 12);
}
 
 
代码修改说明：
 
1. 在 writeEEPROM 和 readEEPROM 函数中，将16位地址转换为14位地址进行处理。通过 uint16_t newAddress = (address & 0x3FFF); 将传入的地址截断为14位，然后按照新的14位地址格式（高7位和低7位分别传输）发送给EEPROM。
2. 在计算页写入字节数和判断地址相关操作时，使用新的14位地址变量 newAddress ，以确保在14位寻址模式下的正确性。例如， if ((newAddress % EEPROM_PAGE_SIZE) + length > EEPROM_PAGE_SIZE) 用于判断是否跨页写入。
3. 在 writeTimingSettingsToEEPROM 和 readTimingSettingsFromEEPROM 函数中，写入和读取定时设置数据的地址仍然保持为0和12，但在实际的读写操作中，会将这些地址转换为14位地址进行处理，确保与14位寻址模式兼容。
 
请注意，以上代码假设AT24C128芯片在14位寻址模式下能够正确工作，并且设备对地址的传输和解释方式与代码中的修改一致。在实际应用中，可能需要根据芯片的具体规格和要求进行进一步的调整和测试。


1. 写入数据验证
 
- 写入特定数据：在 writeEEPROM 函数成功写入数据后，可以立即尝试从写入的地址读取数据，检查读取回来的数据是否与写入的数据一致。例如，在 writeEEPROM 函数中写入一个已知的字节序列（如 0x01, 0x02, 0x03, 0x04 等），然后在写入完成后调用 readEEPROM 函数从相同地址读取相同长度的数据，并将读取的数据与写入的数据逐个字节进行比较。如果所有字节都匹配，则说明写入和读取操作在14位寻址下基本正常，数据能够正确存储和检索。
- 检查写入地址范围：由于改为14位寻址后，地址范围变为0到16383，在进行写入操作时，故意尝试写入边界地址（如0和16383）以及超出边界的地址（如-1和16384），观察代码是否能够正确处理地址范围错误。如果对于超出范围的地址，代码能够按照预期打印错误信息（如“EEPROM写入数据出现错误，地址: [超出范围的地址值]”），并且不进行错误的写入操作，而对于合法的边界地址能够正确写入和读取数据，那么可以初步判断14位寻址下地址范围处理是正确的。
 
2. 读取数据验证
 
- 读取已知数据：预先在EEPROM中存储一些已知数据（可以使用其他工具或方法写入），然后使用 readEEPROM 函数从相应地址读取数据，检查读取结果是否与预期一致。例如，在地址0处预先存储了 0x55, 0xAA 两个字节的数据，通过 readEEPROM(0, 2) 读取数据后，判断返回的字符串或字节数组是否包含这两个字节，并且顺序和内容都正确。
- 读取不同长度数据：尝试从EEPROM中读取不同长度的数据，包括小于页大小、等于页大小和跨页的数据。例如，读取长度为10字节（小于页大小64字节）、64字节（等于页大小）和70字节（跨页）的数据，检查 readEEPROM 函数在各种情况下是否能够正确处理地址计算、数据接收和结果判断。如果对于不同长度的数据读取都能得到正确的结果，并且在跨页读取时能够正确处理页边界，那么说明14位寻址下的数据读取功能正常。
 
3. 定时设置数据读写验证
 
- 写入和读取定时数据：调用 writeTimingSettingsToEEPROM 函数写入定时设置数据（如定时1和定时2的起始小时、分钟、结束小时、分钟和定时标志等），然后使用 readTimingSettingsFromEEPROM 函数读取这些数据，并检查读取回来的数据是否与写入的数据一致。例如，写入定时1的起始小时为10，分钟为30，结束小时为12，分钟为0，定时标志为 true ，读取后检查这些值是否正确解析和返回。
- 检查数据合法性处理：在 readTimingSettingsFromEEPROM 函数中，对于读取到的定时数据进行合法性检查（如检查数据长度是否为12字节，前8字节是否为数字字符等）。故意修改存储在EEPROM中的定时数据，使其包含非法字符或长度不正确，然后读取这些数据，观察代码是否能够正确检测到数据的非法性并打印相应的错误信息（如“定时1读取到的数据存在非法字符”）。如果数据合法性检查功能正常，那么说明14位寻址下定时设置数据的读写和校验机制正常工作。
 
4. 错误处理验证
 
- 写入错误处理：在 writeEEPROM 函数中，模拟写入错误情况，如在写入过程中中断 Wire 通信（可以通过拔掉连接EEPROM的通信线等方式，注意在实际测试中确保这种操作不会对硬件造成损坏），观察代码是否能够按照预期进行重试（最多3次），并且在重试失败后正确打印最终错误信息（“多次重试后，EEPROM写入数据仍然失败，地址: [写入地址]”）。如果错误处理机制能够正确响应写入错误，进行重试并给出准确的错误提示，那么说明14位寻址下写入操作的错误处理功能正常。
- 读取错误处理：在 readEEPROM 函数中，模拟读取错误情况，如请求读取超出EEPROM总容量的字节数（如请求读取16385字节），或者在读取过程中干扰 Wire 通信，检查代码是否能够正确检测到错误并打印相应的错误信息（如“从EEPROM读取数据出现错误，期望读取 [请求字节数] 字节，实际读取 [实际接收字节数] 字节，地址: [读取地址]”）。如果读取错误处理功能能够准确识别和报告各种错误情况，那么说明14位寻址下读取操作的错误处理机制有效。
 
5. 整体系统测试
 
- 结合实际应用场景测试：如果代码是用于特定的设备或系统中，将修改后的代码集成到整个系统中，进行全面的功能测试。例如，如果是用于一个定时控制系统，设置不同的定时参数，观察系统是否能够根据存储在EEPROM中的定时设置数据正确执行定时操作。在系统运行过程中，检查数据的读写是否稳定，是否会出现数据丢失或错误的情况，以及14位寻址是否与系统中的其他组件或功能正常协作。通过在实际应用场景中的测试，可以更全面地评估14位寻址修改后的代码的有效性和稳定性，确保代码在实际使用中能够满足系统的需求。
 
6. 边界情况测试
 
- 地址边界情况：除了上述提到的边界地址（0和16383）测试外，还可以测试一些特殊的边界情况，如地址为16382时写入一个字节的数据，然后读取该字节，检查是否正确；或者在地址为1时写入数据，使其跨越到下一页（地址为65时），再读取整个跨页数据，验证数据的完整性和正确性。这些边界情况测试可以帮助发现代码在处理地址边界附近数据时可能存在的问题。
- 数据长度边界情况：对于写入和读取数据长度的边界情况进行测试，如写入长度为1字节（最小有效数据长度）和63字节（页大小减1）的数据，以及读取长度为EEPROM总容量减1字节的数据。确保代码在处理这些边界长度数据时不会出现缓冲区溢出、数据截断或其他异常情况，保证数据的准确处理。
 
7. 兼容性测试
 
- 不同硬件平台测试：如果代码可能运行在不同的硬件平台上（即使都是基于相同的AT24C128芯片），在多个硬件平台上进行测试，检查14位寻址功能是否在不同硬件环境下都能正常工作。不同硬件平台可能存在差异，如微控制器的性能、 Wire 库的实现细节等，这些差异可能影响14位寻址代码的运行效果。通过在多种硬件平台上的测试，可以提高代码的兼容性和可靠性，确保代码能够在不同设备上稳定运行。
- 与其他代码或库的兼容性：如果代码需要与其他代码或库协同工作，例如与其他传感器驱动代码、通信协议库等一起使用，测试14位寻址代码与这些组件的兼容性。确保在集成到更大的系统中时，不会因为与其他代码的交互而出现问题，如地址冲突、数据干扰或函数调用异常等情况。在进行兼容性测试时，需要全面考虑系统中各个组件之间的相互关系，模拟各种可能的运行情况，以发现潜在的兼容性问题。
 
通过以上多种方式的测试，可以全面检查代码在14位寻址下的正确性、稳定性和兼容性，确保代码能够在实际应用中可靠地工作。如果在测试过程中发现任何问题，需要仔细分析代码逻辑，检查地址计算、数据传输和处理等环节，找出问题的根源并进行修复。